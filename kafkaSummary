1. 集群的副本同步机制？
	Ø 分布式系统副本机制有两个好处：
通过提供数据冗余，即使系统部分组件失效，系统依然能够继续运转，增加了整体可用性以及数据持久性；
提供了高伸缩性，能够通过增加机器的方式来提升读性能，进而提高读操作吞吐量，如mysql从库；

	Ø kafka的副本机制只有一个好处：就是通过数据冗余保证高可用性。
	Ø partition的副本就是一个只能追加写消息的提交日志。同一个分区下的所有副本保存有相同的消息序列，这些副本分散保存在不同的 Broker 上，从而能够对抗部分 Broker 宕机带来的数据不可用。
	Ø 副本分成两类：领导者副本（Leader Replica）和追随者副本（Follower Replica）。每个分区在创建时都要选举一个副本，称为领导者副本，其余的副本自动称为追随者副本，并且只能有 1 个领导者副本和 N-1 个追随者副本。
	在 Kafka 中，追随者副本是不对外提供服务的。任何一个追随者副本都不能响应消费者和生产者的读写请求。所有的请求都必须由领导者副本来处理，或者说，所有的读写请求都必须发往领导者副本所在的 Broker，由该 Broker 负责处理。追随者副本不处理客户端请求，它唯一的任务就是从领导者副本异步拉取消息，并写入到自己的提交日志中，从而实现与领导者副本的同步。
	当领导者副本挂掉了，Kafka 依托于 ZooKeeper 提供的监控功能能够实时感知到，并立即开启新一轮的领导者选举，从追随者副本中选一个作为新的领导者。老 Leader 副本重启回来后，只能作为追随者副本加入到集群中。
	Ø 这种副本机制有两个方面的好处：
	• 方便实现 读己之所写“Read-your-writes”。
	所谓 Read-your-writes，顾名思义就是，当你使用生产者 API 向 Kafka 成功写入消息后，马上使用消费者 API 去读取刚才生产的消息。
	举个例子，比如你平时发微博时，你发完一条微博，肯定是希望能立即看到的，这就是典型的 Read-your-writes 场景。如果允许追随者副本对外提供服务，由于副本同步是异步的，因此有可能出现追随者副本还没有从领导者副本那里拉取到最新的消息，从而使得客户端看不到最新写入的消息。
	
	• 方便实现 单调读一致性（Monotonic Reads）。
	什么是单调读呢？就是对于一个消费者用户而言，在多次消费消息时，它不会看到某条消息一会儿存在一会儿不存在。
	如果允许追随者副本提供读服务，那么假设当前有 2 个追随者副本 F1 和 F2，它们异步地拉取领导者副本数据。倘若 F1 拉取了 Leader 的最新消息而 F2 还未及时拉取，那么，此时如果有一个消费者先从 F1 读取消息之后又从 F2 拉取消息，它可能会看到这样的现象：第一次消费时看到的最新消息在第二次消费时不见了，这就不是单调读一致性。但是，如果所有的读请求都是由 Leader 来处理，那么 Kafka 就很容易实现单调读一致性。
	————————————————
	原文链接：https://blog.csdn.net/weixin_39468305/article/details/106369196
	
2. 面试官：说出八种消息队列的应用场景
	Ø 应用解耦：不需要关心消费者，只需要发送的消息队列，谁用谁订阅
	Ø 异步处理：如ticc的发送报告，不阻塞主流程，提高响应速度
	Ø 削峰填谷：使用消息队列缓冲消息，根据下游的处理能力自动调节流量
	Ø 任务依赖：需要依赖其他人的响应，订阅对应的topic，有流量就处理即可，而不用去轮询，可以实时处理
	Ø 消息广播：只需要关心消息是否送达了队列，至于谁关心它谁去订阅，可以同时被多个消费者消费
	Ø 消息通讯：支持点对点模型和发布订阅模型
	Ø 数据采集：如ticc运维系统实时收集日志
	Ø 流计算任务：大数据领域比较通用的架构，使用kafka作为数据源头
	Ø 消息队列确实有着非常广泛的应用，但它也有缺点：
	消息队列会带来一定的延迟问题；
	降低了数据的一致性；如果要保证强一致性则需要高代价的补偿，如分布式事务、对账。
	有数据丢失的风险；比如宕机重启，如果要保证高可用需要额外的机制如双活容灾。
	因此:
	不适合要求实时响应的系统、
	不适合要求数据强一致性的系统(比如直接和钱有关系的系统 银行转账 第三方支付)、不适合不能容忍数据丢失的系统
	
	https://www.cnblogs.com/qingyunzong/p/9004593.html
	https://www.jianshu.com/p/a2f21abec785
	8. 如何增加写的性能？
9. Kafka怎么判断一个broker是否还存活？

Kafka怎么实现分区策略，怎么实现负载均衡？

https://zhuanlan.zhihu.com/p/260648154
https://blog.csdn.net/forfuture1978/article/details/4711308?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control
https://blog.csdn.net/jmx_bigdata/article/details/88873268?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control
